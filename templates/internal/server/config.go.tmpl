// Code generated by sqlc-grpc (https://github.com/walterwanderley/sqlc-grpc).

package server

import (
	"context"
	"context"
	"fmt"
	"github.com/Enigmatic-Smile/go-common/logger"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"

	"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging"
	"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery"
	"google.golang.org/grpc"
)

// Config represents the server configuration
type Config struct {
	ServiceName     string
	Port            int	
	EnableCors      bool
	{{if .Metric}}PrometheusPort  int{{end}}
	{{if .DistributedTracing}}OtlpEndpoint string{{end}}

	Middlewares     []HttpMiddlewareType
}
{{if .Metric}}
// PrometheusEnabled check configuration
func (c Config) PrometheusEnabled() bool {
	return c.PrometheusPort > 0
}{{end}}
{{if .DistributedTracing}}
// TracingEnabled check configuration
func (c Config) TracingEnabled() bool {
	return c.OtlpEndpoint != ""
}{{end}}

func (c Config) grpcInterceptors(l *logger.Logger) []grpc.UnaryServerInterceptor {
	interceptors := make([]grpc.UnaryServerInterceptor, 0)
	interceptors = append(interceptors, logging.UnaryServerInterceptor(interceptorLogger(l),
		logging.WithDisableLoggingFields("protocol", "grpc.component", "grpc.method_type")))	
	interceptors = append(interceptors, errorMapper)
	interceptors = append(interceptors, recovery.UnaryServerInterceptor())

	return interceptors
}

func interceptorLogger(l *logger.Logger) logging.Logger {
	return logging.LoggerFunc(func(ctx context.Context, lvl logging.Level, msg string, fields ...any) {
		f := make([]zap.Field, 0)
		if len(fields) >= 2 {
			for i := 0; i < len(fields); i += 2 {
				key, ok := fields[i].(string)
				if !ok {
					l.Warn(ctx, "key is not a string", zap.String("key", fmt.Sprintf("%v", key)))
					continue
				}

				f = append(f, zap.Any(key, fields[i+1]))
			}
		}

		l.Log(transformLevel(lvl), msg, f...)
	})
}

func transformLevel(lvl logging.Level) zapcore.Level {
	switch lvl {
	case logging.LevelDebug:
		return zapcore.DebugLevel
	case logging.LevelInfo:
		return zapcore.InfoLevel
	case logging.LevelWarn:
		return zapcore.WarnLevel
	case logging.LevelError:
		return zapcore.ErrorLevel
	default:
		return zapcore.InfoLevel
	}
}
